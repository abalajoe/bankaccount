<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1500044583326">{:repl-history {:ide [], :local [&quot;(map #(+ 2 %) [1 2])&quot; &quot;(reduce #(+ 2 %) [1 2])&quot; &quot;(reduce + #(+ 2 %) [1 2])&quot; &quot;(reduce + (partial + 2) [1 2])&quot; &quot;(reduce (partial + 2) [1 2])&quot; &quot;(apply (partial + 2) [1 2])&quot; &quot;(apply #(+ 2 %) [1 2])&quot; &quot;(apply \n  [1 2])&quot; &quot;(apply (partial + 2) [1 2 3])&quot; &quot;(apply (partial + 1) [1 2])&quot; &quot;(reduce (partial + 1) [1 2])&quot; &quot;(reduce (partial + 1) [2 3])&quot; &quot;(apply (partial + 1) [2 3])&quot; &quot;(reduce (partial + 1) [1 2 3])&quot; &quot;(apply (partial + 1) [1 2 3])&quot; &quot;(reduce conj #{} [:a :b :c])&quot; &quot;(reduce {} [:a :b :c])&quot; &quot;(reduce conj {} [:a :b :c])&quot; &quot;(apply conj {} [:a :b :c])&quot; &quot;(apply {} [:a :b :c])&quot; &quot;(apply hash-map [:a :b :c])&quot; &quot;(reduce inc [1 2 3])&quot; &quot;(reduce (partial + 1) [1 2 3 4])&quot; &quot;(apply (partial + 1) [1 2 3 4])&quot; &quot;(reduce (partial + 2) [1 2 3])&quot; &quot;(apply (partial + 2) [1 2 3 4]) &quot; &quot;(apply hash-map [:a 7])&quot; &quot;(#(apply map * %&amp;) [1 2 3] [4 5 6] [7 8 9])&quot; &quot;(empty? [])&quot; &quot;(empty? [1 2])&quot; &quot;(#(map *) [1 2 3] [4 5 6] [7 8 9])&quot; &quot;(#(map * %&amp;) [1 2 3] [4 5 6] [7 8 9])&quot; &quot;(defn -main\n  \&quot;main entry of application\&quot;\n  [&amp; args]\n  (log/info \&quot;===================================================\&quot;)\n  (log/info \&quot;SIKIKA CONTENT SERVER API - VERSION 1.1.0\&quot;)\n  (log/info \&quot;===================================================\&quot;)\n\n  (config/load-configuration)                                 ; load configuration\n  (http/initialize-http )                                   ; initialize http server\n\n  ;; register runtime hook\n  (.addShutdownHook (Runtime/getRuntime) (Thread. end-program))\n\n  ;; start server\n  (try\n    (http/start-server)\n    (catch Exception e\n      (do\n        (log/error \&quot;start server E: \&quot; (.getMessage e))\n        ;; end program gracefully\n        (end-program)))))&quot; &quot;(ns contentserver.core (:gen-class)\n  ^{:author \&quot;jabala\&quot;\n    :doc \&quot;The Content Server Service API\&quot;\n    :added \&quot;1.0\&quot;\n    }\n  (:require [clojure.tools.logging :as log]\n            [contentserver.httpserver :as http]\n            [contentserver.utils.config :as config]))&quot; &quot;(defn end-program\n  \&quot;Function shuts application down gracefully\&quot;\n  []\n  ; stop server\n  (http/stop-server ))&quot; &quot;(defn -main\n  \&quot;main entry of application\&quot;\n  [&amp; args]\n  (log/info \&quot;===================================================\&quot;)\n  (log/info \&quot;BANK ACCOUNT API - VERSION 1.1.0\&quot;)\n  (log/info \&quot;===================================================\&quot;)\n\n  (config/load-configuration)                                 ; load configuration\n  (http/initialize-http )                                   ; initialize http server\n\n  ;; register runtime hook\n  (.addShutdownHook (Runtime/getRuntime) (Thread. end-program))\n\n  ;; start server\n  (try\n    (http/start-server)\n    (catch Exception e\n      (do\n        (log/error \&quot;start server E: \&quot; (.getMessage e))\n        ;; end program gracefully\n        (end-program)))))&quot; &quot;(-main)&quot; &quot;(ns contentserver.core-test\n  (:use midje.sweet)\n  (:require [clojure.test :refer :all]\n            [contentserver.core :refer :all]\n            [contentserver.utils.util :as util]\n            [clj-http.client :as http]\n            [ring.mock.request :as mock]\n            [contentserver.httpserver :as httpserver]\n            [clojure.data.json :as json]))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Forward content\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:body response) =&gt; (json/write-str {:status \&quot;success\&quot; :status-msg \&quot;Your balance is $300\&quot; :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Forward content\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:body response) =&gt; (json/write-str {:status  \&quot;success\&quot; :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))  :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/mode/sikika-content-server/\&quot;\n                                              {:username \&quot;sikika\&quot;\n                                               :password \&quot;sikika123\&quot;\n                                               :msisdn 716278748}))] ;\n               (:status response) =&gt; 200\n               (:body response) =&gt; (json/write-str {:status  \&quot;success\&quot; :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))  :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:body response) =&gt; (json/write-str {:status  \&quot;success\&quot; :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))  :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;}\n               (:body response) =&gt; (json/write-str {:status  \&quot;success\&quot; :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))  :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8, \&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status  \&quot;success\&quot; :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))  :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8 \&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status  \&quot;success\&quot; :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))  :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status  \&quot;success\&quot; :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))  :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status \&quot;success\&quot; :status-msg \&quot;Welcome to Bank Account API\&quot; :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid Route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/invalid\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status \&quot;success\&quot; :status-msg \&quot;Welcome to Bank Account API\&quot; :status-code 200}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid Route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/invalid\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status 200\n                                                    :headers {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;}\n                                                    :body (json/write-str {:status \&quot;Failed\&quot; :status-msg \&quot;Invalid Request\&quot; :status-code 404})}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid Route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/invalid\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status 404\n                                                    :headers {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;}\n                                                    :body (json/write-str {:status \&quot;Failed\&quot; :status-msg \&quot;Invalid Request\&quot; :status-code 404})}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status \&quot;success\&quot; :status-msg \&quot;Welcome to Bank Account API\&quot;}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Check Balance\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/balance\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status  \&quot;success\&quot; :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid Route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/invalid\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status 404\n                                                    :headers {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;}\n                                                    :body (json/write-str {:status \&quot;Failed\&quot; :status-msg \&quot;Invalid Request\&quot;})}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code 0 \&quot;success\&quot; :status-msg \&quot;Welcome to Bank Account API\&quot;}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code 0 :status-msg \&quot;Welcome to Bank Account API\&quot;}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Check Balance\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/balance\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code 0 :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid Route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/invalid\&quot;\n                                              ))] ;\n               (:status response) =&gt; 404\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -1 :status-msg \&quot;Invalid Request\&quot;}))))&quot; &quot;(let [val \&quot;\&quot;\n      ])&quot; &quot;(Integer? \&quot;\&quot;)&quot; &quot;(integer? \&quot;\&quot;)&quot; &quot;(integer? 1234)&quot; &quot;(integer? 1234567)&quot; &quot;(integer? 123456789)&quot; &quot;(integer? 123456789123)&quot; &quot;(integer? -1)&quot; &quot;(let [val \&quot;\&quot;\n      ]\n  (if (and (not (integer? val)) (&gt; val 10)) 1 0))&quot; &quot;(let [val 1\n      ]\n  (if (and (not (integer? val)) (&gt; val 10)) 1 0))&quot; &quot;(let [val 1\n      res (try\n            (if (&gt; val 10) 1 0)\n          (catch ClassCastException e\n           0 ))]\n res)&quot; &quot;(let [val 10\n      res (try\n            (if (&gt; val 10) 1 0)\n          (catch ClassCastException e\n           0 ))]\n res)&quot; &quot;(let [val 11\n      res (try\n            (if (&gt; val 10) 1 0)\n          (catch ClassCastException e\n           0 ))]\n res)&quot; &quot;(let [val \&quot;\&quot;\n      res (try\n            (if (&gt; val 10) 1 0)\n          (catch ClassCastException e\n           0 ))]\n res)&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str (json/write-str {:status-code -2 :status-msg \&quot;Invalid Input\&quot;})))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Input\&quot;}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Input\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Input\&quot;}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;10\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;50000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $40,000\&quot;}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;30000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $40,000\&quot;}))))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;30000\&quot; :with \&quot;with\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $40,000\&quot;}))))&quot; &quot;(ns contentserver.core-test\n  (:use midje.sweet)\n  (:require [clojure.test :refer :all]\n            [contentserver.core :refer :all]\n            [contentserver.utils.util :as util]\n            [clj-http.client :as http]\n            [ring.mock.request :as mock]\n            [contentserver.httpserver :as httpserver]\n            [clojure.data.json :as json]\n            [contentserver.model.datasource :as db]))&quot; &quot;(facts \&quot;Withdraw Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;30000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $40,000\&quot;}))))&quot; &quot;(facts \&quot;Withdraw Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;30000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $20,000\&quot;}))))&quot; &quot;(fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))&quot; &quot;(fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;30000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $20,000\&quot;})))&quot; &quot;(fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))&quot; &quot;(fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;50000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $20,000\&quot;})))&quot; &quot;(Long/parseLong \&quot;1233444\&quot;)&quot; &quot;(defdb db (postgres {:db         \&quot;bankaccount\&quot;\n                     :user       \&quot;postgres\&quot;\n                     :password   \&quot;root\&quot;\n                     ;:host       \&quot;159.203.104.154\&quot;\n                     :host       \&quot;localhost\&quot;\n                     :port       \&quot;5432\&quot;\n                     :delimiters \&quot;\&quot;}))&quot; &quot;(defn update-deposit-information\n  \&quot;update deposit information\&quot;\n  [id balance deposit-count]\n  (try\n    (exec-raw db [(format \&quot;update tbl_account set balance=%d, deposit_count=%d where id=%d returning balance\&quot; balance deposit-count id)] :results)\n    (catch SQLException e\n      (log/error (.getMessage e)))\n    (catch Exception e\n      (log/error (.getMessage e))))\n  (log/info \&quot;db \&quot; id balance deposit-count))&quot; &quot;(defn update-deposit-information\n  \&quot;update deposit information\&quot;\n  [id balance deposit-count]\n  (try\n    (exec-raw db [(format \&quot;update tbl_account set balance=%d, deposit_count=%d where id=%d RETURNING id;\&quot; balance deposit-count id)] :results)\n    (catch SQLException e\n      (log/error (.getMessage e)))\n    (catch Exception e\n      (log/error (.getMessage e))))\n  (log/info \&quot;db \&quot; id balance deposit-count))&quot; &quot;(defn update-deposit-information\n  \&quot;update deposit information\&quot;\n  [id balance deposit-count]\n  (try\n    (exec-raw db [(format \&quot;update tbl_account set balance=%d, deposit_count=%d where id=%d RETURNING id;\&quot; balance deposit-count id)] :results)\n    (catch SQLException e\n      (log/error (.getMessage e)))\n    (catch Exception e\n      (log/error (.getMessage e)))))&quot; &quot;(update-deposit-information 37 120000 3)&quot; &quot;(facts \&quot;Withdraw Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;50000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $20,000\&quot;}))))&quot; &quot;(ns contentserver.model.datasource\n  ^{:author \&quot;joeabala\&quot;\n    :doc    \&quot;Database configurations\&quot;\n    :added  \&quot;1.0\&quot;\n    }\n  (:require\n            [clojure.tools.logging :as log])\n  (:use korma.core)\n  (:use korma.db)\n  (:use pg-hstore.core)\n  (:import (java.sql SQLException)))&quot; &quot;(defdb db (postgres {:db         \&quot;bankaccount\&quot;\n                     :user       \&quot;postgres\&quot;\n                     :password   \&quot;root\&quot;\n                     :host       \&quot;159.203.104.154\&quot;\n                    ; :host       \&quot;localhost\&quot;\n                     :port       \&quot;5432\&quot;\n                     :delimiters \&quot;\&quot;}))&quot; &quot;(get-account-information)&quot; &quot;(ns contentserver.core-test\n  (:use midje.sweet)\n  (:require [clojure.test :refer :all]\n            [contentserver.core :refer :all]\n            [clj-http.client :as http]\n            [ring.mock.request :as mock]\n            [contentserver.httpserver :as httpserver]\n            [clojure.data.json :as json]\n            [contentserver.model.datasource :as db]))&quot; &quot;(facts \&quot;Bank Account testing\&quot;\n       (fact \&quot;Default route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code 0 :status-msg \&quot;Welcome to Bank Account API\&quot;})))\n       (fact \&quot;Check Balance\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/balance\&quot;\n                                              ))] ;\n               (:status response) =&gt; 200\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code 0 :status-msg \&quot;Your balance request is successful\&quot;\n                                                    :balance (:balance (first (db/get-account-information)))})))\n       (fact \&quot;Invalid Route\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :get \&quot;/invalid\&quot;\n                                              ))] ;\n               (:status response) =&gt; 404\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -1 :status-msg \&quot;Invalid Request\&quot;}))))&quot; &quot;(facts \&quot;Deposit Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/deposit\&quot;\n                                              {:deposit \&quot;50000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $40,000\&quot;}))))&quot; &quot;(facts \&quot;Withdraw Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:withdraw \&quot;50000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot deposit more than $20,000\&quot;}))))&quot; &quot;(facts \&quot;Withdraw Account testing\&quot;\n       (fact \&quot;Invalid input\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;hello\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Invalid Amount\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:deposit \&quot;9\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;Invalid Amount\&quot;})))\n       (fact \&quot;Max Daily Deposit\&quot;\n             (let [response (httpserver/app (mock/request\n                                              :post \&quot;/withdraw\&quot;\n                                              {:withdraw \&quot;50000\&quot;}))] ;\n               (:status response) =&gt; 422\n               (:headers response) =&gt; {\&quot;Content-Type\&quot; \&quot;application/json; charset=utf-8\&quot;, \&quot;X-Content-Type-Options\&quot; \&quot;nosniff\&quot;, \&quot;X-Frame-Options\&quot; \&quot;SAMEORIGIN\&quot;, \&quot;X-XSS-Protection\&quot; \&quot;1; mode=block\&quot;}\n               (:body response) =&gt; (json/write-str {:status-code -2 :status-msg \&quot;You cannot withdraw more than $20,000\&quot;}))))&quot;], :remote []}}</component>
</project>